{"ast":null,"code":"import { parseAccount } from '../../accounts/utils/parseAccount.js';\nimport { AccountNotFoundError, AccountTypeNotSupportedError } from '../../errors/account.js';\nimport { BaseError } from '../../errors/base.js';\nimport { recoverAuthorizationAddress } from '../../experimental/eip7702/utils/recoverAuthorizationAddress.js';\nimport { assertCurrentChain } from '../../utils/chain/assertCurrentChain.js';\nimport { getTransactionError } from '../../utils/errors/getTransactionError.js';\nimport { extract } from '../../utils/formatters/extract.js';\nimport { formatTransactionRequest } from '../../utils/formatters/transactionRequest.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { assertRequest } from '../../utils/transaction/assertRequest.js';\nimport { getChainId } from '../public/getChainId.js';\nimport { defaultParameters, prepareTransactionRequest } from './prepareTransactionRequest.js';\nimport { sendRawTransaction } from './sendRawTransaction.js';\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction(client, parameters) {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    authorizationList,\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    value,\n    ...rest\n  } = parameters;\n  if (!account_) throw new AccountNotFoundError({\n    docsPath: '/docs/actions/wallet/sendTransaction'\n  });\n  const account = parseAccount(account_);\n  try {\n    assertRequest(parameters);\n    const to = await (async () => {\n      // If `to` exists on the parameters, use that.\n      if (parameters.to) return parameters.to;\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n      // address of the first authorization in the list.\n      if (authorizationList && authorizationList.length > 0) return await recoverAuthorizationAddress({\n        authorization: authorizationList[0]\n      }).catch(() => {\n        throw new BaseError('`to` is required. Could not infer from `authorizationList`.');\n      });\n      // Otherwise, we are sending a deployment transaction.\n      return undefined;\n    })();\n    if (account.type === 'json-rpc') {\n      let chainId;\n      if (chain !== null) {\n        chainId = await getAction(client, getChainId, 'getChainId')({});\n        assertCurrentChain({\n          currentChainId: chainId,\n          chain\n        });\n      }\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format;\n      const format = chainFormat || formatTransactionRequest;\n      const request = format({\n        // Pick out extra data that might exist on the chain's transaction request type.\n        ...extract(rest, {\n          format: chainFormat\n        }),\n        accessList,\n        authorizationList,\n        blobs,\n        chainId,\n        data,\n        from: account.address,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value\n      });\n      return await client.request({\n        method: 'eth_sendTransaction',\n        params: [request]\n      }, {\n        retryCount: 0\n      });\n    }\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(client, prepareTransactionRequest, 'prepareTransactionRequest')({\n        account,\n        accessList,\n        authorizationList,\n        blobs,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        nonceManager: account.nonceManager,\n        parameters: [...defaultParameters, 'sidecars'],\n        value,\n        ...rest,\n        to\n      });\n      const serializer = chain?.serializers?.transaction;\n      const serializedTransaction = await account.signTransaction(request, {\n        serializer\n      });\n      return await getAction(client, sendRawTransaction, 'sendRawTransaction')({\n        serializedTransaction\n      });\n    }\n    if (account.type === 'smart') throw new AccountTypeNotSupportedError({\n      metaMessages: ['Consider using the `sendUserOperation` Action instead.'],\n      docsPath: '/docs/actions/bundler/sendUserOperation',\n      type: 'smart'\n    });\n    throw new AccountTypeNotSupportedError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n      type: account.type\n    });\n  } catch (err) {\n    if (err instanceof AccountTypeNotSupportedError) throw err;\n    throw getTransactionError(err, {\n      ...parameters,\n      account,\n      chain: parameters.chain || undefined\n    });\n  }\n}","map":{"version":3,"names":["parseAccount","AccountNotFoundError","AccountTypeNotSupportedError","BaseError","recoverAuthorizationAddress","assertCurrentChain","getTransactionError","extract","formatTransactionRequest","getAction","assertRequest","getChainId","defaultParameters","prepareTransactionRequest","sendRawTransaction","sendTransaction","client","parameters","account","account_","chain","accessList","authorizationList","blobs","data","gas","gasPrice","maxFeePerBlobGas","maxFeePerGas","maxPriorityFeePerGas","nonce","value","rest","docsPath","to","length","authorization","catch","undefined","type","chainId","currentChainId","chainFormat","formatters","transactionRequest","format","request","from","address","method","params","retryCount","nonceManager","serializer","serializers","transaction","serializedTransaction","signTransaction","metaMessages","err"],"sources":["C:\\Users\\seahs\\repos\\worldcoin-app\\node_modules\\@worldcoin\\idkit-core\\node_modules\\viem\\actions\\wallet\\sendTransaction.ts"],"sourcesContent":["import type { Account } from '../../accounts/types.js'\nimport {\n  type ParseAccountErrorType,\n  parseAccount,\n} from '../../accounts/utils/parseAccount.js'\nimport type { SignTransactionErrorType } from '../../accounts/utils/signTransaction.js'\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport {\n  AccountNotFoundError,\n  type AccountNotFoundErrorType,\n  AccountTypeNotSupportedError,\n  type AccountTypeNotSupportedErrorType,\n} from '../../errors/account.js'\nimport { BaseError } from '../../errors/base.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport {\n  type RecoverAuthorizationAddressErrorType,\n  recoverAuthorizationAddress,\n} from '../../experimental/eip7702/utils/recoverAuthorizationAddress.js'\nimport type { GetAccountParameter } from '../../types/account.js'\nimport type { Chain, DeriveChain } from '../../types/chain.js'\nimport type { GetChainParameter } from '../../types/chain.js'\nimport type { GetTransactionRequestKzgParameter } from '../../types/kzg.js'\nimport type { Hash } from '../../types/misc.js'\nimport type { TransactionRequest } from '../../types/transaction.js'\nimport type { UnionOmit } from '../../types/utils.js'\nimport type { RequestErrorType } from '../../utils/buildRequest.js'\nimport {\n  type AssertCurrentChainErrorType,\n  assertCurrentChain,\n} from '../../utils/chain/assertCurrentChain.js'\nimport {\n  type GetTransactionErrorReturnType,\n  getTransactionError,\n} from '../../utils/errors/getTransactionError.js'\nimport { extract } from '../../utils/formatters/extract.js'\nimport {\n  type FormattedTransactionRequest,\n  formatTransactionRequest,\n} from '../../utils/formatters/transactionRequest.js'\nimport { getAction } from '../../utils/getAction.js'\nimport {\n  type AssertRequestErrorType,\n  type AssertRequestParameters,\n  assertRequest,\n} from '../../utils/transaction/assertRequest.js'\nimport { type GetChainIdErrorType, getChainId } from '../public/getChainId.js'\nimport {\n  type PrepareTransactionRequestErrorType,\n  defaultParameters,\n  prepareTransactionRequest,\n} from './prepareTransactionRequest.js'\nimport {\n  type SendRawTransactionErrorType,\n  sendRawTransaction,\n} from './sendRawTransaction.js'\n\nexport type SendTransactionRequest<\n  chain extends Chain | undefined = Chain | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  ///\n  _derivedChain extends Chain | undefined = DeriveChain<chain, chainOverride>,\n> = UnionOmit<FormattedTransactionRequest<_derivedChain>, 'from'> &\n  GetTransactionRequestKzgParameter\n\nexport type SendTransactionParameters<\n  chain extends Chain | undefined = Chain | undefined,\n  account extends Account | undefined = Account | undefined,\n  chainOverride extends Chain | undefined = Chain | undefined,\n  request extends SendTransactionRequest<\n    chain,\n    chainOverride\n  > = SendTransactionRequest<chain, chainOverride>,\n> = request &\n  GetAccountParameter<account> &\n  GetChainParameter<chain, chainOverride> &\n  GetTransactionRequestKzgParameter<request>\n\nexport type SendTransactionReturnType = Hash\n\nexport type SendTransactionErrorType =\n  | ParseAccountErrorType\n  | GetTransactionErrorReturnType<\n      | AccountNotFoundErrorType\n      | AccountTypeNotSupportedErrorType\n      | AssertCurrentChainErrorType\n      | AssertRequestErrorType\n      | GetChainIdErrorType\n      | PrepareTransactionRequestErrorType\n      | SendRawTransactionErrorType\n      | RecoverAuthorizationAddressErrorType\n      | SignTransactionErrorType\n      | RequestErrorType\n    >\n  | ErrorType\n\n/**\n * Creates, signs, and sends a new transaction to the network.\n *\n * - Docs: https://viem.sh/docs/actions/wallet/sendTransaction\n * - Examples: https://stackblitz.com/github/wevm/viem/tree/main/examples/transactions/sending-transactions\n * - JSON-RPC Methods:\n *   - JSON-RPC Accounts: [`eth_sendTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendtransaction)\n *   - Local Accounts: [`eth_sendRawTransaction`](https://ethereum.org/en/developers/docs/apis/json-rpc/#eth_sendrawtransaction)\n *\n * @param client - Client to use\n * @param parameters - {@link SendTransactionParameters}\n * @returns The [Transaction](https://viem.sh/docs/glossary/terms#transaction) hash. {@link SendTransactionReturnType}\n *\n * @example\n * import { createWalletClient, custom } from 'viem'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   chain: mainnet,\n *   transport: custom(window.ethereum),\n * })\n * const hash = await sendTransaction(client, {\n *   account: '0xA0Cf798816D4b9b9866b5330EEa46a18382f251e',\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n *\n * @example\n * // Account Hoisting\n * import { createWalletClient, http } from 'viem'\n * import { privateKeyToAccount } from 'viem/accounts'\n * import { mainnet } from 'viem/chains'\n * import { sendTransaction } from 'viem/wallet'\n *\n * const client = createWalletClient({\n *   account: privateKeyToAccount('0xâ€¦'),\n *   chain: mainnet,\n *   transport: http(),\n * })\n * const hash = await sendTransaction(client, {\n *   to: '0x70997970c51812dc3a010c7d01b50e0d17dc79c8',\n *   value: 1000000000000000000n,\n * })\n */\nexport async function sendTransaction<\n  chain extends Chain | undefined,\n  account extends Account | undefined,\n  const request extends SendTransactionRequest<chain, chainOverride>,\n  chainOverride extends Chain | undefined = undefined,\n>(\n  client: Client<Transport, chain, account>,\n  parameters: SendTransactionParameters<chain, account, chainOverride, request>,\n): Promise<SendTransactionReturnType> {\n  const {\n    account: account_ = client.account,\n    chain = client.chain,\n    accessList,\n    authorizationList,\n    blobs,\n    data,\n    gas,\n    gasPrice,\n    maxFeePerBlobGas,\n    maxFeePerGas,\n    maxPriorityFeePerGas,\n    nonce,\n    value,\n    ...rest\n  } = parameters\n\n  if (!account_)\n    throw new AccountNotFoundError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n    })\n  const account = parseAccount(account_)\n\n  try {\n    assertRequest(parameters as AssertRequestParameters)\n\n    const to = await (async () => {\n      // If `to` exists on the parameters, use that.\n      if (parameters.to) return parameters.to\n\n      // If no `to` exists, and we are sending a EIP-7702 transaction, use the\n      // address of the first authorization in the list.\n      if (authorizationList && authorizationList.length > 0)\n        return await recoverAuthorizationAddress({\n          authorization: authorizationList[0],\n        }).catch(() => {\n          throw new BaseError(\n            '`to` is required. Could not infer from `authorizationList`.',\n          )\n        })\n\n      // Otherwise, we are sending a deployment transaction.\n      return undefined\n    })()\n\n    if (account.type === 'json-rpc') {\n      let chainId: number | undefined\n      if (chain !== null) {\n        chainId = await getAction(client, getChainId, 'getChainId')({})\n        assertCurrentChain({\n          currentChainId: chainId,\n          chain,\n        })\n      }\n\n      const chainFormat = client.chain?.formatters?.transactionRequest?.format\n      const format = chainFormat || formatTransactionRequest\n\n      const request = format({\n        // Pick out extra data that might exist on the chain's transaction request type.\n        ...extract(rest, { format: chainFormat }),\n        accessList,\n        authorizationList,\n        blobs,\n        chainId,\n        data,\n        from: account.address,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        to,\n        value,\n      } as TransactionRequest)\n      return await client.request(\n        {\n          method: 'eth_sendTransaction',\n          params: [request],\n        },\n        { retryCount: 0 },\n      )\n    }\n\n    if (account.type === 'local') {\n      // Prepare the request for signing (assign appropriate fees, etc.)\n      const request = await getAction(\n        client,\n        prepareTransactionRequest,\n        'prepareTransactionRequest',\n      )({\n        account,\n        accessList,\n        authorizationList,\n        blobs,\n        chain,\n        data,\n        gas,\n        gasPrice,\n        maxFeePerBlobGas,\n        maxFeePerGas,\n        maxPriorityFeePerGas,\n        nonce,\n        nonceManager: account.nonceManager,\n        parameters: [...defaultParameters, 'sidecars'],\n        value,\n        ...rest,\n        to,\n      } as any)\n\n      const serializer = chain?.serializers?.transaction\n      const serializedTransaction = (await account.signTransaction(request, {\n        serializer,\n      })) as Hash\n      return await getAction(\n        client,\n        sendRawTransaction,\n        'sendRawTransaction',\n      )({\n        serializedTransaction,\n      })\n    }\n\n    if (account.type === 'smart')\n      throw new AccountTypeNotSupportedError({\n        metaMessages: [\n          'Consider using the `sendUserOperation` Action instead.',\n        ],\n        docsPath: '/docs/actions/bundler/sendUserOperation',\n        type: 'smart',\n      })\n\n    throw new AccountTypeNotSupportedError({\n      docsPath: '/docs/actions/wallet/sendTransaction',\n      type: (account as { type: string }).type,\n    })\n  } catch (err) {\n    if (err instanceof AccountTypeNotSupportedError) throw err\n    throw getTransactionError(err as BaseError, {\n      ...parameters,\n      account,\n      chain: parameters.chain || undefined,\n    })\n  }\n}\n"],"mappings":"AACA,SAEEA,YAAY,QACP,sCAAsC;AAI7C,SACEC,oBAAoB,EAEpBC,4BAA4B,QAEvB,yBAAyB;AAChC,SAASC,SAAS,QAAQ,sBAAsB;AAEhD,SAEEC,2BAA2B,QACtB,iEAAiE;AASxE,SAEEC,kBAAkB,QACb,yCAAyC;AAChD,SAEEC,mBAAmB,QACd,2CAA2C;AAClD,SAASC,OAAO,QAAQ,mCAAmC;AAC3D,SAEEC,wBAAwB,QACnB,8CAA8C;AACrD,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAGEC,aAAa,QACR,0CAA0C;AACjD,SAAmCC,UAAU,QAAQ,yBAAyB;AAC9E,SAEEC,iBAAiB,EACjBC,yBAAyB,QACpB,gCAAgC;AACvC,SAEEC,kBAAkB,QACb,yBAAyB;AAyChC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CA,OAAO,eAAeC,eAAeA,CAMnCC,MAAyC,EACzCC,UAA6E;EAE7E,MAAM;IACJC,OAAO,EAAEC,QAAQ,GAAGH,MAAM,CAACE,OAAO;IAClCE,KAAK,GAAGJ,MAAM,CAACI,KAAK;IACpBC,UAAU;IACVC,iBAAiB;IACjBC,KAAK;IACLC,IAAI;IACJC,GAAG;IACHC,QAAQ;IACRC,gBAAgB;IAChBC,YAAY;IACZC,oBAAoB;IACpBC,KAAK;IACLC,KAAK;IACL,GAAGC;EAAI,CACR,GAAGf,UAAU;EAEd,IAAI,CAACE,QAAQ,EACX,MAAM,IAAIlB,oBAAoB,CAAC;IAC7BgC,QAAQ,EAAE;GACX,CAAC;EACJ,MAAMf,OAAO,GAAGlB,YAAY,CAACmB,QAAQ,CAAC;EAEtC,IAAI;IACFT,aAAa,CAACO,UAAqC,CAAC;IAEpD,MAAMiB,EAAE,GAAG,MAAM,CAAC,YAAW;MAC3B;MACA,IAAIjB,UAAU,CAACiB,EAAE,EAAE,OAAOjB,UAAU,CAACiB,EAAE;MAEvC;MACA;MACA,IAAIZ,iBAAiB,IAAIA,iBAAiB,CAACa,MAAM,GAAG,CAAC,EACnD,OAAO,MAAM/B,2BAA2B,CAAC;QACvCgC,aAAa,EAAEd,iBAAiB,CAAC,CAAC;OACnC,CAAC,CAACe,KAAK,CAAC,MAAK;QACZ,MAAM,IAAIlC,SAAS,CACjB,6DAA6D,CAC9D;MACH,CAAC,CAAC;MAEJ;MACA,OAAOmC,SAAS;IAClB,CAAC,EAAC,CAAE;IAEJ,IAAIpB,OAAO,CAACqB,IAAI,KAAK,UAAU,EAAE;MAC/B,IAAIC,OAA2B;MAC/B,IAAIpB,KAAK,KAAK,IAAI,EAAE;QAClBoB,OAAO,GAAG,MAAM/B,SAAS,CAACO,MAAM,EAAEL,UAAU,EAAE,YAAY,CAAC,CAAC,EAAE,CAAC;QAC/DN,kBAAkB,CAAC;UACjBoC,cAAc,EAAED,OAAO;UACvBpB;SACD,CAAC;MACJ;MAEA,MAAMsB,WAAW,GAAG1B,MAAM,CAACI,KAAK,EAAEuB,UAAU,EAAEC,kBAAkB,EAAEC,MAAM;MACxE,MAAMA,MAAM,GAAGH,WAAW,IAAIlC,wBAAwB;MAEtD,MAAMsC,OAAO,GAAGD,MAAM,CAAC;QACrB;QACA,GAAGtC,OAAO,CAACyB,IAAI,EAAE;UAAEa,MAAM,EAAEH;QAAW,CAAE,CAAC;QACzCrB,UAAU;QACVC,iBAAiB;QACjBC,KAAK;QACLiB,OAAO;QACPhB,IAAI;QACJuB,IAAI,EAAE7B,OAAO,CAAC8B,OAAO;QACrBvB,GAAG;QACHC,QAAQ;QACRC,gBAAgB;QAChBC,YAAY;QACZC,oBAAoB;QACpBC,KAAK;QACLI,EAAE;QACFH;OACqB,CAAC;MACxB,OAAO,MAAMf,MAAM,CAAC8B,OAAO,CACzB;QACEG,MAAM,EAAE,qBAAqB;QAC7BC,MAAM,EAAE,CAACJ,OAAO;OACjB,EACD;QAAEK,UAAU,EAAE;MAAC,CAAE,CAClB;IACH;IAEA,IAAIjC,OAAO,CAACqB,IAAI,KAAK,OAAO,EAAE;MAC5B;MACA,MAAMO,OAAO,GAAG,MAAMrC,SAAS,CAC7BO,MAAM,EACNH,yBAAyB,EACzB,2BAA2B,CAC5B,CAAC;QACAK,OAAO;QACPG,UAAU;QACVC,iBAAiB;QACjBC,KAAK;QACLH,KAAK;QACLI,IAAI;QACJC,GAAG;QACHC,QAAQ;QACRC,gBAAgB;QAChBC,YAAY;QACZC,oBAAoB;QACpBC,KAAK;QACLsB,YAAY,EAAElC,OAAO,CAACkC,YAAY;QAClCnC,UAAU,EAAE,CAAC,GAAGL,iBAAiB,EAAE,UAAU,CAAC;QAC9CmB,KAAK;QACL,GAAGC,IAAI;QACPE;OACM,CAAC;MAET,MAAMmB,UAAU,GAAGjC,KAAK,EAAEkC,WAAW,EAAEC,WAAW;MAClD,MAAMC,qBAAqB,GAAI,MAAMtC,OAAO,CAACuC,eAAe,CAACX,OAAO,EAAE;QACpEO;OACD,CAAU;MACX,OAAO,MAAM5C,SAAS,CACpBO,MAAM,EACNF,kBAAkB,EAClB,oBAAoB,CACrB,CAAC;QACA0C;OACD,CAAC;IACJ;IAEA,IAAItC,OAAO,CAACqB,IAAI,KAAK,OAAO,EAC1B,MAAM,IAAIrC,4BAA4B,CAAC;MACrCwD,YAAY,EAAE,CACZ,wDAAwD,CACzD;MACDzB,QAAQ,EAAE,yCAAyC;MACnDM,IAAI,EAAE;KACP,CAAC;IAEJ,MAAM,IAAIrC,4BAA4B,CAAC;MACrC+B,QAAQ,EAAE,sCAAsC;MAChDM,IAAI,EAAGrB,OAA4B,CAACqB;KACrC,CAAC;EACJ,CAAC,CAAC,OAAOoB,GAAG,EAAE;IACZ,IAAIA,GAAG,YAAYzD,4BAA4B,EAAE,MAAMyD,GAAG;IAC1D,MAAMrD,mBAAmB,CAACqD,GAAgB,EAAE;MAC1C,GAAG1C,UAAU;MACbC,OAAO;MACPE,KAAK,EAAEH,UAAU,CAACG,KAAK,IAAIkB;KAC5B,CAAC;EACJ;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}