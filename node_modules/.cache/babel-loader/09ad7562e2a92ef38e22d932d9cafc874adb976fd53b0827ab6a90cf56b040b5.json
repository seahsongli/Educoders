{"ast":null,"code":"import { universalSignatureValidatorAbi } from '../../constants/abis.js';\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js';\nimport { CallExecutionError } from '../../errors/contract.js';\nimport { encodeDeployData } from '../../utils/abi/encodeDeployData.js';\nimport { getAddress } from '../../utils/address/getAddress.js';\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js';\nimport { isBytesEqual } from '../../utils/data/isBytesEqual.js';\nimport { isHex } from '../../utils/data/isHex.js';\nimport { bytesToHex } from '../../utils/encoding/toHex.js';\nimport { getAction } from '../../utils/getAction.js';\nimport { isErc6492Signature } from '../../utils/signature/isErc6492Signature.js';\nimport { recoverAddress } from '../../utils/signature/recoverAddress.js';\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js';\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js';\nimport { call } from './call.js';\n/**\n * Verifies a message hash onchain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash(client, parameters) {\n  const {\n    address,\n    factory,\n    factoryData,\n    hash,\n    signature,\n    ...rest\n  } = parameters;\n  const signatureHex = (() => {\n    if (isHex(signature)) return signature;\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature) return serializeSignature(signature);\n    return bytesToHex(signature);\n  })();\n  const wrappedSignature = await (async () => {\n    // If no `factory` or `factoryData` is provided, it is assumed that the\n    // address is not a Smart Account, or the Smart Account is already deployed.\n    if (!factory && !factoryData) return signatureHex;\n    // If the signature is already wrapped, return the signature.\n    if (isErc6492Signature(signatureHex)) return signatureHex;\n    // If the Smart Account is not deployed, wrap the signature with a 6492 wrapper\n    // to perform counterfactual validation.\n    return serializeErc6492Signature({\n      address: factory,\n      data: factoryData,\n      signature: signatureHex\n    });\n  })();\n  try {\n    const {\n      data\n    } = await getAction(client, call, 'call')({\n      data: encodeDeployData({\n        abi: universalSignatureValidatorAbi,\n        args: [address, hash, wrappedSignature],\n        bytecode: universalSignatureValidatorByteCode\n      }),\n      ...rest\n    });\n    return isBytesEqual(data ?? '0x0', '0x1');\n  } catch (error) {\n    // Fallback attempt to verify the signature via ECDSA recovery.\n    try {\n      const verified = isAddressEqual(getAddress(address), await recoverAddress({\n        hash,\n        signature\n      }));\n      if (verified) return true;\n    } catch {}\n    if (error instanceof CallExecutionError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false;\n    }\n    throw error;\n  }\n}","map":{"version":3,"names":["universalSignatureValidatorAbi","universalSignatureValidatorByteCode","CallExecutionError","encodeDeployData","getAddress","isAddressEqual","isBytesEqual","isHex","bytesToHex","getAction","isErc6492Signature","recoverAddress","serializeErc6492Signature","serializeSignature","call","verifyHash","client","parameters","address","factory","factoryData","hash","signature","rest","signatureHex","wrappedSignature","data","abi","args","bytecode","error","verified"],"sources":["C:\\Users\\seahs\\repos\\worldcoin-app\\node_modules\\@worldcoin\\idkit-core\\node_modules\\viem\\actions\\public\\verifyHash.ts"],"sourcesContent":["import type { Address } from 'abitype'\n\nimport type { Client } from '../../clients/createClient.js'\nimport type { Transport } from '../../clients/transports/createTransport.js'\nimport { universalSignatureValidatorAbi } from '../../constants/abis.js'\nimport { universalSignatureValidatorByteCode } from '../../constants/contracts.js'\nimport { CallExecutionError } from '../../errors/contract.js'\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { ByteArray, Hex, Signature } from '../../types/misc.js'\nimport type { OneOf } from '../../types/utils.js'\nimport {\n  type EncodeDeployDataErrorType,\n  encodeDeployData,\n} from '../../utils/abi/encodeDeployData.js'\nimport { getAddress } from '../../utils/address/getAddress.js'\nimport { isAddressEqual } from '../../utils/address/isAddressEqual.js'\nimport {\n  type IsBytesEqualErrorType,\n  isBytesEqual,\n} from '../../utils/data/isBytesEqual.js'\nimport { type IsHexErrorType, isHex } from '../../utils/data/isHex.js'\nimport { type ToHexErrorType, bytesToHex } from '../../utils/encoding/toHex.js'\nimport { getAction } from '../../utils/getAction.js'\nimport { isErc6492Signature } from '../../utils/signature/isErc6492Signature.js'\nimport { recoverAddress } from '../../utils/signature/recoverAddress.js'\nimport { serializeErc6492Signature } from '../../utils/signature/serializeErc6492Signature.js'\nimport { serializeSignature } from '../../utils/signature/serializeSignature.js'\nimport { type CallErrorType, type CallParameters, call } from './call.js'\n\nexport type VerifyHashParameters = Pick<\n  CallParameters,\n  'blockNumber' | 'blockTag'\n> & {\n  /** The address that signed the original message. */\n  address: Address\n  /** The hash to be verified. */\n  hash: Hex\n  /** The signature that was generated by signing the message with the address's private key. */\n  signature: Hex | ByteArray | Signature\n} & OneOf<{ factory: Address; factoryData: Hex } | {}>\n\nexport type VerifyHashReturnType = boolean\n\nexport type VerifyHashErrorType =\n  | CallErrorType\n  | IsHexErrorType\n  | ToHexErrorType\n  | IsBytesEqualErrorType\n  | EncodeDeployDataErrorType\n  | ErrorType\n\n/**\n * Verifies a message hash onchain using ERC-6492.\n *\n * @param client - Client to use.\n * @param parameters - {@link VerifyHashParameters}\n * @returns Whether or not the signature is valid. {@link VerifyHashReturnType}\n */\nexport async function verifyHash<chain extends Chain | undefined>(\n  client: Client<Transport, chain>,\n  parameters: VerifyHashParameters,\n): Promise<VerifyHashReturnType> {\n  const { address, factory, factoryData, hash, signature, ...rest } = parameters\n\n  const signatureHex = (() => {\n    if (isHex(signature)) return signature\n    if (typeof signature === 'object' && 'r' in signature && 's' in signature)\n      return serializeSignature(signature)\n    return bytesToHex(signature)\n  })()\n\n  const wrappedSignature = await (async () => {\n    // If no `factory` or `factoryData` is provided, it is assumed that the\n    // address is not a Smart Account, or the Smart Account is already deployed.\n    if (!factory && !factoryData) return signatureHex\n\n    // If the signature is already wrapped, return the signature.\n    if (isErc6492Signature(signatureHex)) return signatureHex\n\n    // If the Smart Account is not deployed, wrap the signature with a 6492 wrapper\n    // to perform counterfactual validation.\n    return serializeErc6492Signature({\n      address: factory!,\n      data: factoryData!,\n      signature: signatureHex,\n    })\n  })()\n\n  try {\n    const { data } = await getAction(\n      client,\n      call,\n      'call',\n    )({\n      data: encodeDeployData({\n        abi: universalSignatureValidatorAbi,\n        args: [address, hash, wrappedSignature],\n        bytecode: universalSignatureValidatorByteCode,\n      }),\n      ...rest,\n    } as unknown as CallParameters)\n\n    return isBytesEqual(data ?? '0x0', '0x1')\n  } catch (error) {\n    // Fallback attempt to verify the signature via ECDSA recovery.\n    try {\n      const verified = isAddressEqual(\n        getAddress(address),\n        await recoverAddress({ hash, signature }),\n      )\n      if (verified) return true\n    } catch {}\n\n    if (error instanceof CallExecutionError) {\n      // if the execution fails, the signature was not valid and an internal method inside of the validator reverted\n      // this can happen for many reasons, for example if signer can not be recovered from the signature\n      // or if the signature has no valid format\n      return false\n    }\n\n    throw error\n  }\n}\n"],"mappings":"AAIA,SAASA,8BAA8B,QAAQ,yBAAyB;AACxE,SAASC,mCAAmC,QAAQ,8BAA8B;AAClF,SAASC,kBAAkB,QAAQ,0BAA0B;AAK7D,SAEEC,gBAAgB,QACX,qCAAqC;AAC5C,SAASC,UAAU,QAAQ,mCAAmC;AAC9D,SAASC,cAAc,QAAQ,uCAAuC;AACtE,SAEEC,YAAY,QACP,kCAAkC;AACzC,SAA8BC,KAAK,QAAQ,2BAA2B;AACtE,SAA8BC,UAAU,QAAQ,+BAA+B;AAC/E,SAASC,SAAS,QAAQ,0BAA0B;AACpD,SAASC,kBAAkB,QAAQ,6CAA6C;AAChF,SAASC,cAAc,QAAQ,yCAAyC;AACxE,SAASC,yBAAyB,QAAQ,oDAAoD;AAC9F,SAASC,kBAAkB,QAAQ,6CAA6C;AAChF,SAAkDC,IAAI,QAAQ,WAAW;AAwBzE;;;;;;;AAOA,OAAO,eAAeC,UAAUA,CAC9BC,MAAgC,EAChCC,UAAgC;EAEhC,MAAM;IAAEC,OAAO;IAAEC,OAAO;IAAEC,WAAW;IAAEC,IAAI;IAAEC,SAAS;IAAE,GAAGC;EAAI,CAAE,GAAGN,UAAU;EAE9E,MAAMO,YAAY,GAAG,CAAC,MAAK;IACzB,IAAIjB,KAAK,CAACe,SAAS,CAAC,EAAE,OAAOA,SAAS;IACtC,IAAI,OAAOA,SAAS,KAAK,QAAQ,IAAI,GAAG,IAAIA,SAAS,IAAI,GAAG,IAAIA,SAAS,EACvE,OAAOT,kBAAkB,CAACS,SAAS,CAAC;IACtC,OAAOd,UAAU,CAACc,SAAS,CAAC;EAC9B,CAAC,EAAC,CAAE;EAEJ,MAAMG,gBAAgB,GAAG,MAAM,CAAC,YAAW;IACzC;IACA;IACA,IAAI,CAACN,OAAO,IAAI,CAACC,WAAW,EAAE,OAAOI,YAAY;IAEjD;IACA,IAAId,kBAAkB,CAACc,YAAY,CAAC,EAAE,OAAOA,YAAY;IAEzD;IACA;IACA,OAAOZ,yBAAyB,CAAC;MAC/BM,OAAO,EAAEC,OAAQ;MACjBO,IAAI,EAAEN,WAAY;MAClBE,SAAS,EAAEE;KACZ,CAAC;EACJ,CAAC,EAAC,CAAE;EAEJ,IAAI;IACF,MAAM;MAAEE;IAAI,CAAE,GAAG,MAAMjB,SAAS,CAC9BO,MAAM,EACNF,IAAI,EACJ,MAAM,CACP,CAAC;MACAY,IAAI,EAAEvB,gBAAgB,CAAC;QACrBwB,GAAG,EAAE3B,8BAA8B;QACnC4B,IAAI,EAAE,CAACV,OAAO,EAAEG,IAAI,EAAEI,gBAAgB,CAAC;QACvCI,QAAQ,EAAE5B;OACX,CAAC;MACF,GAAGsB;KACyB,CAAC;IAE/B,OAAOjB,YAAY,CAACoB,IAAI,IAAI,KAAK,EAAE,KAAK,CAAC;EAC3C,CAAC,CAAC,OAAOI,KAAK,EAAE;IACd;IACA,IAAI;MACF,MAAMC,QAAQ,GAAG1B,cAAc,CAC7BD,UAAU,CAACc,OAAO,CAAC,EACnB,MAAMP,cAAc,CAAC;QAAEU,IAAI;QAAEC;MAAS,CAAE,CAAC,CAC1C;MACD,IAAIS,QAAQ,EAAE,OAAO,IAAI;IAC3B,CAAC,CAAC,MAAM,CAAC;IAET,IAAID,KAAK,YAAY5B,kBAAkB,EAAE;MACvC;MACA;MACA;MACA,OAAO,KAAK;IACd;IAEA,MAAM4B,KAAK;EACb;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}