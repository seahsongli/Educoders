{"ast":null,"code":"import { buildRequest } from '../../utils/buildRequest.js';\nimport { uid as uid_ } from '../../utils/uid.js';\n/**\n * @description Creates an transport intended to be used with a client.\n */\nexport function createTransport({\n  key,\n  name,\n  request,\n  retryCount = 3,\n  retryDelay = 150,\n  timeout,\n  type\n}, value) {\n  const uid = uid_();\n  return {\n    config: {\n      key,\n      name,\n      request,\n      retryCount,\n      retryDelay,\n      timeout,\n      type\n    },\n    request: buildRequest(request, {\n      retryCount,\n      retryDelay,\n      uid\n    }),\n    value\n  };\n}","map":{"version":3,"names":["buildRequest","uid","uid_","createTransport","key","name","request","retryCount","retryDelay","timeout","type","value","config"],"sources":["C:\\Users\\seahs\\repos\\worldcoin-app\\node_modules\\@worldcoin\\idkit-core\\node_modules\\viem\\clients\\transports\\createTransport.ts"],"sourcesContent":["import type { ErrorType } from '../../errors/utils.js'\nimport type { Chain } from '../../types/chain.js'\nimport type { EIP1193RequestFn } from '../../types/eip1193.js'\nimport { buildRequest } from '../../utils/buildRequest.js'\nimport { uid as uid_ } from '../../utils/uid.js'\nimport type { ClientConfig } from '../createClient.js'\n\nexport type TransportConfig<\n  type extends string = string,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = {\n  /** The name of the transport. */\n  name: string\n  /** The key of the transport. */\n  key: string\n  /** The JSON-RPC request function that matches the EIP-1193 request spec. */\n  request: eip1193RequestFn\n  /** The base delay (in ms) between retries. */\n  retryDelay?: number | undefined\n  /** The max number of times to retry. */\n  retryCount?: number | undefined\n  /** The timeout (in ms) for requests. */\n  timeout?: number | undefined\n  /** The type of the transport. */\n  type: type\n}\n\nexport type Transport<\n  type extends string = string,\n  rpcAttributes = Record<string, any>,\n  eip1193RequestFn extends EIP1193RequestFn = EIP1193RequestFn,\n> = <chain extends Chain | undefined = Chain>({\n  chain,\n}: {\n  chain?: chain | undefined\n  pollingInterval?: ClientConfig['pollingInterval'] | undefined\n  retryCount?: TransportConfig['retryCount'] | undefined\n  timeout?: TransportConfig['timeout'] | undefined\n}) => {\n  config: TransportConfig<type>\n  request: eip1193RequestFn\n  value?: rpcAttributes | undefined\n}\n\nexport type CreateTransportErrorType = ErrorType\n\n/**\n * @description Creates an transport intended to be used with a client.\n */\nexport function createTransport<\n  type extends string,\n  rpcAttributes extends Record<string, any>,\n>(\n  {\n    key,\n    name,\n    request,\n    retryCount = 3,\n    retryDelay = 150,\n    timeout,\n    type,\n  }: TransportConfig<type>,\n  value?: rpcAttributes | undefined,\n): ReturnType<Transport<type, rpcAttributes>> {\n  const uid = uid_()\n  return {\n    config: {\n      key,\n      name,\n      request,\n      retryCount,\n      retryDelay,\n      timeout,\n      type,\n    },\n    request: buildRequest(request, { retryCount, retryDelay, uid }),\n    value,\n  }\n}\n"],"mappings":"AAGA,SAASA,YAAY,QAAQ,6BAA6B;AAC1D,SAASC,GAAG,IAAIC,IAAI,QAAQ,oBAAoB;AA0ChD;;;AAGA,OAAM,SAAUC,eAAeA,CAI7B;EACEC,GAAG;EACHC,IAAI;EACJC,OAAO;EACPC,UAAU,GAAG,CAAC;EACdC,UAAU,GAAG,GAAG;EAChBC,OAAO;EACPC;AAAI,CACkB,EACxBC,KAAiC;EAEjC,MAAMV,GAAG,GAAGC,IAAI,EAAE;EAClB,OAAO;IACLU,MAAM,EAAE;MACNR,GAAG;MACHC,IAAI;MACJC,OAAO;MACPC,UAAU;MACVC,UAAU;MACVC,OAAO;MACPC;KACD;IACDJ,OAAO,EAAEN,YAAY,CAACM,OAAO,EAAE;MAAEC,UAAU;MAAEC,UAAU;MAAEP;IAAG,CAAE,CAAC;IAC/DU;GACD;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}