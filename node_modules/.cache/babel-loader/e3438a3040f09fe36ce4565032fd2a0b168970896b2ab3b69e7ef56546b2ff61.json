{"ast":null,"code":"import { equalBytes } from '@noble/curves/abstract/utils';\nimport { toBytes } from '../encoding/toBytes.js';\nimport { isHex } from './isHex.js';\nexport function isBytesEqual(a_, b_) {\n  const a = isHex(a_) ? toBytes(a_) : a_;\n  const b = isHex(b_) ? toBytes(b_) : b_;\n  return equalBytes(a, b);\n}","map":{"version":3,"names":["equalBytes","toBytes","isHex","isBytesEqual","a_","b_","a","b"],"sources":["C:\\Users\\seahs\\repos\\worldcoin-app\\node_modules\\@worldcoin\\idkit-core\\node_modules\\viem\\utils\\data\\isBytesEqual.ts"],"sourcesContent":["import { equalBytes } from '@noble/curves/abstract/utils'\n\nimport type { ErrorType } from '../../errors/utils.js'\nimport type { ByteArray, Hex } from '../../types/misc.js'\nimport { type ToBytesErrorType, toBytes } from '../encoding/toBytes.js'\nimport { type IsHexErrorType, isHex } from './isHex.js'\n\nexport type IsBytesEqualErrorType =\n  | IsHexErrorType\n  | ToBytesErrorType\n  | ErrorType\n\nexport function isBytesEqual(a_: ByteArray | Hex, b_: ByteArray | Hex) {\n  const a = isHex(a_) ? toBytes(a_) : a_\n  const b = isHex(b_) ? toBytes(b_) : b_\n  return equalBytes(a, b)\n}\n"],"mappings":"AAAA,SAASA,UAAU,QAAQ,8BAA8B;AAIzD,SAAgCC,OAAO,QAAQ,wBAAwB;AACvE,SAA8BC,KAAK,QAAQ,YAAY;AAOvD,OAAM,SAAUC,YAAYA,CAACC,EAAmB,EAAEC,EAAmB;EACnE,MAAMC,CAAC,GAAGJ,KAAK,CAACE,EAAE,CAAC,GAAGH,OAAO,CAACG,EAAE,CAAC,GAAGA,EAAE;EACtC,MAAMG,CAAC,GAAGL,KAAK,CAACG,EAAE,CAAC,GAAGJ,OAAO,CAACI,EAAE,CAAC,GAAGA,EAAE;EACtC,OAAOL,UAAU,CAACM,CAAC,EAAEC,CAAC,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}