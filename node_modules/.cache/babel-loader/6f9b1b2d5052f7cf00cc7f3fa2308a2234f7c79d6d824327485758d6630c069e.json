{"ast":null,"code":"import { encodeAction, generateSignal } from \"./chunk-QN7JTJAQ.js\";\n\n// src/types/bridge.ts\nvar AppErrorCodes = /* @__PURE__ */(AppErrorCodes2 => {\n  AppErrorCodes2[\"ConnectionFailed\"] = \"connection_failed\";\n  AppErrorCodes2[\"VerificationRejected\"] = \"verification_rejected\";\n  AppErrorCodes2[\"MaxVerificationsReached\"] = \"max_verifications_reached\";\n  AppErrorCodes2[\"CredentialUnavailable\"] = \"credential_unavailable\";\n  AppErrorCodes2[\"MalformedRequest\"] = \"malformed_request\";\n  AppErrorCodes2[\"InvalidNetwork\"] = \"invalid_network\";\n  AppErrorCodes2[\"InclusionProofFailed\"] = \"inclusion_proof_failed\";\n  AppErrorCodes2[\"InclusionProofPending\"] = \"inclusion_proof_pending\";\n  AppErrorCodes2[\"UnexpectedResponse\"] = \"unexpected_response\";\n  AppErrorCodes2[\"FailedByHostApp\"] = \"failed_by_host_app\";\n  AppErrorCodes2[\"GenericError\"] = \"generic_error\";\n  return AppErrorCodes2;\n})(AppErrorCodes || {});\nvar VerificationState = /* @__PURE__ */(VerificationState2 => {\n  VerificationState2[\"PreparingClient\"] = \"loading_widget\";\n  VerificationState2[\"WaitingForConnection\"] = \"awaiting_connection\";\n  VerificationState2[\"WaitingForApp\"] = \"awaiting_app\";\n  VerificationState2[\"Confirmed\"] = \"confirmed\";\n  VerificationState2[\"Failed\"] = \"failed\";\n  return VerificationState2;\n})(VerificationState || {});\n\n// src/types/config.ts\nvar CredentialType = /* @__PURE__ */(CredentialType2 => {\n  CredentialType2[\"Orb\"] = \"orb\";\n  CredentialType2[\"Device\"] = \"device\";\n  return CredentialType2;\n})(CredentialType || {});\nvar VerificationLevel = /* @__PURE__ */(VerificationLevel2 => {\n  VerificationLevel2[\"Orb\"] = \"orb\";\n  VerificationLevel2[\"Device\"] = \"device\";\n  return VerificationLevel2;\n})(VerificationLevel || {});\n\n// src/bridge.ts\nimport { create } from \"zustand\";\n\n// src/lib/validation.ts\nfunction validate_bridge_url(bridge_url, is_staging) {\n  try {\n    new URL(bridge_url);\n  } catch (e) {\n    return {\n      valid: false,\n      errors: [\"Failed to parse Bridge URL.\"]\n    };\n  }\n  const test_url = new URL(bridge_url);\n  const errors = [];\n  if (is_staging && [\"localhost\", \"127.0.0.1\"].includes(test_url.hostname)) {\n    console.log(\"Using staging app_id with localhost bridge_url. Skipping validation.\");\n    return {\n      valid: true\n    };\n  }\n  if (test_url.protocol !== \"https:\") {\n    errors.push(\"Bridge URL must use HTTPS.\");\n  }\n  if (test_url.port) {\n    errors.push(\"Bridge URL must use the default port (443).\");\n  }\n  if (test_url.pathname !== \"/\") {\n    errors.push(\"Bridge URL must not have a path.\");\n  }\n  if (test_url.search) {\n    errors.push(\"Bridge URL must not have query parameters.\");\n  }\n  if (test_url.hash) {\n    errors.push(\"Bridge URL must not have a fragment.\");\n  }\n  if (!test_url.hostname.endsWith(\".worldcoin.org\") && !test_url.hostname.endsWith(\".toolsforhumanity.com\")) {\n    console.warn(\"Bridge URL should be a subdomain of worldcoin.org or toolsforhumanity.com. The user's identity wallet may refuse to connect. This is a temporary measure and may be removed in the future.\");\n  }\n  if (errors.length) {\n    return {\n      valid: false,\n      errors\n    };\n  }\n  return {\n    valid: true\n  };\n}\n\n// src/lib/utils.ts\nimport { Buffer } from \"buffer/index.js\";\nvar DEFAULT_VERIFICATION_LEVEL = \"orb\" /* Orb */;\nvar buffer_encode = buffer => {\n  return Buffer.from(buffer).toString(\"base64\");\n};\nvar buffer_decode = encoded => {\n  return Buffer.from(encoded, \"base64\");\n};\nvar verification_level_to_credential_types = verification_level => {\n  switch (verification_level) {\n    case \"device\" /* Device */:\n      return [\"orb\" /* Orb */, \"device\" /* Device */];\n    case \"orb\" /* Orb */:\n      return [\"orb\" /* Orb */];\n    default:\n      throw new Error(`Unknown verification level: ${verification_level}`);\n  }\n};\nvar credential_type_to_verification_level = credential_type => {\n  switch (credential_type) {\n    case \"orb\" /* Orb */:\n      return \"orb\" /* Orb */;\n    case \"device\" /* Device */:\n      return \"device\" /* Device */;\n    default:\n      throw new Error(`Unknown credential_type: ${credential_type}`);\n  }\n};\n\n// src/lib/crypto.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar generateKey = async () => {\n  return {\n    iv: window.crypto.getRandomValues(new Uint8Array(12)),\n    key: await window.crypto.subtle.generateKey({\n      name: \"AES-GCM\",\n      length: 256\n    }, true, [\"encrypt\", \"decrypt\"])\n  };\n};\nvar exportKey = async key => {\n  return buffer_encode(await window.crypto.subtle.exportKey(\"raw\", key));\n};\nvar encryptRequest = async (key, iv, request) => {\n  return {\n    iv: buffer_encode(iv),\n    payload: buffer_encode(await window.crypto.subtle.encrypt({\n      name: \"AES-GCM\",\n      iv\n    }, key, encoder.encode(request)))\n  };\n};\nvar decryptResponse = async (key, iv, payload) => {\n  return decoder.decode(await window.crypto.subtle.decrypt({\n    name: \"AES-GCM\",\n    iv\n  }, key, buffer_decode(payload)));\n};\n\n// src/bridge.ts\nvar DEFAULT_BRIDGE_URL = \"https://bridge.worldcoin.org\";\nvar useWorldBridgeStore = create((set, get) => ({\n  iv: null,\n  key: null,\n  result: null,\n  errorCode: null,\n  requestId: null,\n  connectorURI: null,\n  bridge_url: DEFAULT_BRIDGE_URL,\n  verificationState: \"loading_widget\" /* PreparingClient */,\n  createClient: async ({\n    bridge_url,\n    app_id,\n    verification_level,\n    action_description,\n    action,\n    signal\n  }) => {\n    const {\n      key,\n      iv\n    } = await generateKey();\n    if (bridge_url) {\n      const validation = validate_bridge_url(bridge_url, app_id.includes(\"staging\"));\n      if (!validation.valid) {\n        console.error(validation.errors.join(\"\\n\"));\n        set({\n          verificationState: \"failed\" /* Failed */\n        });\n        throw new Error(\"Invalid bridge_url. Please check the console for more details.\");\n      }\n    }\n    const res = await fetch(new URL(\"/request\", bridge_url ?? DEFAULT_BRIDGE_URL), {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(await encryptRequest(key, iv, JSON.stringify({\n        app_id,\n        action_description,\n        action: encodeAction(action),\n        signal: generateSignal(signal).digest,\n        credential_types: verification_level_to_credential_types(verification_level ?? DEFAULT_VERIFICATION_LEVEL),\n        verification_level: verification_level ?? DEFAULT_VERIFICATION_LEVEL\n      })))\n    });\n    if (!res.ok) {\n      set({\n        verificationState: \"failed\" /* Failed */\n      });\n      throw new Error(\"Failed to create client\");\n    }\n    const {\n      request_id\n    } = await res.json();\n    set({\n      iv,\n      key,\n      requestId: request_id,\n      bridge_url: bridge_url ?? DEFAULT_BRIDGE_URL,\n      verificationState: \"awaiting_connection\" /* WaitingForConnection */,\n      connectorURI: `https://worldcoin.org/verify?t=wld&i=${request_id}&k=${encodeURIComponent(await exportKey(key))}${bridge_url && bridge_url !== DEFAULT_BRIDGE_URL ? `&b=${encodeURIComponent(bridge_url)}` : \"\"}`\n    });\n  },\n  pollForUpdates: async () => {\n    const key = get().key;\n    if (!key) throw new Error(\"No keypair found. Please call `createClient` first.\");\n    const res = await fetch(new URL(`/response/${get().requestId}`, get().bridge_url));\n    if (!res.ok) {\n      return set({\n        errorCode: \"connection_failed\" /* ConnectionFailed */,\n        verificationState: \"failed\" /* Failed */\n      });\n    }\n    const {\n      response,\n      status\n    } = await res.json();\n    if (status != \"completed\" /* Completed */) {\n      return set({\n        verificationState: status == \"retrieved\" /* Retrieved */ ? \"awaiting_app\" /* WaitingForApp */ : \"awaiting_connection\" /* WaitingForConnection */\n      });\n    }\n    let result = JSON.parse(await decryptResponse(key, buffer_decode(response.iv), response.payload));\n    if (\"error_code\" in result) {\n      return set({\n        errorCode: result.error_code,\n        verificationState: \"failed\" /* Failed */\n      });\n    }\n    if (\"credential_type\" in result) {\n      result = {\n        verification_level: credential_type_to_verification_level(result.credential_type),\n        ...result\n      };\n    }\n    set({\n      result,\n      key: null,\n      requestId: null,\n      connectorURI: null,\n      verificationState: \"confirmed\" /* Confirmed */\n    });\n  },\n  reset: () => {\n    set({\n      iv: null,\n      key: null,\n      result: null,\n      errorCode: null,\n      requestId: null,\n      connectorURI: null,\n      verificationState: \"loading_widget\" /* PreparingClient */\n    });\n  }\n}));\nexport { AppErrorCodes, CredentialType, DEFAULT_VERIFICATION_LEVEL, VerificationLevel, VerificationState, useWorldBridgeStore, verification_level_to_credential_types };","map":{"version":3,"names":["encodeAction","generateSignal","AppErrorCodes","AppErrorCodes2","VerificationState","VerificationState2","CredentialType","CredentialType2","VerificationLevel","VerificationLevel2","create","validate_bridge_url","bridge_url","is_staging","URL","e","valid","errors","test_url","includes","hostname","console","log","protocol","push","port","pathname","search","hash","endsWith","warn","length","Buffer","DEFAULT_VERIFICATION_LEVEL","buffer_encode","buffer","from","toString","buffer_decode","encoded","verification_level_to_credential_types","verification_level","Error","credential_type_to_verification_level","credential_type","encoder","TextEncoder","decoder","TextDecoder","generateKey","iv","window","crypto","getRandomValues","Uint8Array","key","subtle","name","exportKey","encryptRequest","request","payload","encrypt","encode","decryptResponse","decode","decrypt","DEFAULT_BRIDGE_URL","useWorldBridgeStore","set","get","result","errorCode","requestId","connectorURI","verificationState","createClient","app_id","action_description","action","signal","validation","error","join","res","fetch","method","headers","body","JSON","stringify","digest","credential_types","ok","request_id","json","encodeURIComponent","pollForUpdates","response","status","parse","error_code","reset"],"sources":["C:/Users/seahs/repos/worldcoin-app/node_modules/@worldcoin/idkit-core/build/index.js"],"sourcesContent":["import {\n  encodeAction,\n  generateSignal\n} from \"./chunk-QN7JTJAQ.js\";\n\n// src/types/bridge.ts\nvar AppErrorCodes = /* @__PURE__ */ ((AppErrorCodes2) => {\n  AppErrorCodes2[\"ConnectionFailed\"] = \"connection_failed\";\n  AppErrorCodes2[\"VerificationRejected\"] = \"verification_rejected\";\n  AppErrorCodes2[\"MaxVerificationsReached\"] = \"max_verifications_reached\";\n  AppErrorCodes2[\"CredentialUnavailable\"] = \"credential_unavailable\";\n  AppErrorCodes2[\"MalformedRequest\"] = \"malformed_request\";\n  AppErrorCodes2[\"InvalidNetwork\"] = \"invalid_network\";\n  AppErrorCodes2[\"InclusionProofFailed\"] = \"inclusion_proof_failed\";\n  AppErrorCodes2[\"InclusionProofPending\"] = \"inclusion_proof_pending\";\n  AppErrorCodes2[\"UnexpectedResponse\"] = \"unexpected_response\";\n  AppErrorCodes2[\"FailedByHostApp\"] = \"failed_by_host_app\";\n  AppErrorCodes2[\"GenericError\"] = \"generic_error\";\n  return AppErrorCodes2;\n})(AppErrorCodes || {});\nvar VerificationState = /* @__PURE__ */ ((VerificationState2) => {\n  VerificationState2[\"PreparingClient\"] = \"loading_widget\";\n  VerificationState2[\"WaitingForConnection\"] = \"awaiting_connection\";\n  VerificationState2[\"WaitingForApp\"] = \"awaiting_app\";\n  VerificationState2[\"Confirmed\"] = \"confirmed\";\n  VerificationState2[\"Failed\"] = \"failed\";\n  return VerificationState2;\n})(VerificationState || {});\n\n// src/types/config.ts\nvar CredentialType = /* @__PURE__ */ ((CredentialType2) => {\n  CredentialType2[\"Orb\"] = \"orb\";\n  CredentialType2[\"Device\"] = \"device\";\n  return CredentialType2;\n})(CredentialType || {});\nvar VerificationLevel = /* @__PURE__ */ ((VerificationLevel2) => {\n  VerificationLevel2[\"Orb\"] = \"orb\";\n  VerificationLevel2[\"Device\"] = \"device\";\n  return VerificationLevel2;\n})(VerificationLevel || {});\n\n// src/bridge.ts\nimport { create } from \"zustand\";\n\n// src/lib/validation.ts\nfunction validate_bridge_url(bridge_url, is_staging) {\n  try {\n    new URL(bridge_url);\n  } catch (e) {\n    return { valid: false, errors: [\"Failed to parse Bridge URL.\"] };\n  }\n  const test_url = new URL(bridge_url);\n  const errors = [];\n  if (is_staging && [\"localhost\", \"127.0.0.1\"].includes(test_url.hostname)) {\n    console.log(\"Using staging app_id with localhost bridge_url. Skipping validation.\");\n    return { valid: true };\n  }\n  if (test_url.protocol !== \"https:\") {\n    errors.push(\"Bridge URL must use HTTPS.\");\n  }\n  if (test_url.port) {\n    errors.push(\"Bridge URL must use the default port (443).\");\n  }\n  if (test_url.pathname !== \"/\") {\n    errors.push(\"Bridge URL must not have a path.\");\n  }\n  if (test_url.search) {\n    errors.push(\"Bridge URL must not have query parameters.\");\n  }\n  if (test_url.hash) {\n    errors.push(\"Bridge URL must not have a fragment.\");\n  }\n  if (!test_url.hostname.endsWith(\".worldcoin.org\") && !test_url.hostname.endsWith(\".toolsforhumanity.com\")) {\n    console.warn(\n      \"Bridge URL should be a subdomain of worldcoin.org or toolsforhumanity.com. The user's identity wallet may refuse to connect. This is a temporary measure and may be removed in the future.\"\n    );\n  }\n  if (errors.length) {\n    return { valid: false, errors };\n  }\n  return { valid: true };\n}\n\n// src/lib/utils.ts\nimport { Buffer } from \"buffer/index.js\";\nvar DEFAULT_VERIFICATION_LEVEL = \"orb\" /* Orb */;\nvar buffer_encode = (buffer) => {\n  return Buffer.from(buffer).toString(\"base64\");\n};\nvar buffer_decode = (encoded) => {\n  return Buffer.from(encoded, \"base64\");\n};\nvar verification_level_to_credential_types = (verification_level) => {\n  switch (verification_level) {\n    case \"device\" /* Device */:\n      return [\"orb\" /* Orb */, \"device\" /* Device */];\n    case \"orb\" /* Orb */:\n      return [\"orb\" /* Orb */];\n    default:\n      throw new Error(`Unknown verification level: ${verification_level}`);\n  }\n};\nvar credential_type_to_verification_level = (credential_type) => {\n  switch (credential_type) {\n    case \"orb\" /* Orb */:\n      return \"orb\" /* Orb */;\n    case \"device\" /* Device */:\n      return \"device\" /* Device */;\n    default:\n      throw new Error(`Unknown credential_type: ${credential_type}`);\n  }\n};\n\n// src/lib/crypto.ts\nvar encoder = new TextEncoder();\nvar decoder = new TextDecoder();\nvar generateKey = async () => {\n  return {\n    iv: window.crypto.getRandomValues(new Uint8Array(12)),\n    key: await window.crypto.subtle.generateKey({ name: \"AES-GCM\", length: 256 }, true, [\"encrypt\", \"decrypt\"])\n  };\n};\nvar exportKey = async (key) => {\n  return buffer_encode(await window.crypto.subtle.exportKey(\"raw\", key));\n};\nvar encryptRequest = async (key, iv, request) => {\n  return {\n    iv: buffer_encode(iv),\n    payload: buffer_encode(\n      await window.crypto.subtle.encrypt({ name: \"AES-GCM\", iv }, key, encoder.encode(request))\n    )\n  };\n};\nvar decryptResponse = async (key, iv, payload) => {\n  return decoder.decode(await window.crypto.subtle.decrypt({ name: \"AES-GCM\", iv }, key, buffer_decode(payload)));\n};\n\n// src/bridge.ts\nvar DEFAULT_BRIDGE_URL = \"https://bridge.worldcoin.org\";\nvar useWorldBridgeStore = create((set, get) => ({\n  iv: null,\n  key: null,\n  result: null,\n  errorCode: null,\n  requestId: null,\n  connectorURI: null,\n  bridge_url: DEFAULT_BRIDGE_URL,\n  verificationState: \"loading_widget\" /* PreparingClient */,\n  createClient: async ({ bridge_url, app_id, verification_level, action_description, action, signal }) => {\n    const { key, iv } = await generateKey();\n    if (bridge_url) {\n      const validation = validate_bridge_url(bridge_url, app_id.includes(\"staging\"));\n      if (!validation.valid) {\n        console.error(validation.errors.join(\"\\n\"));\n        set({ verificationState: \"failed\" /* Failed */ });\n        throw new Error(\"Invalid bridge_url. Please check the console for more details.\");\n      }\n    }\n    const res = await fetch(new URL(\"/request\", bridge_url ?? DEFAULT_BRIDGE_URL), {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(\n        await encryptRequest(\n          key,\n          iv,\n          JSON.stringify({\n            app_id,\n            action_description,\n            action: encodeAction(action),\n            signal: generateSignal(signal).digest,\n            credential_types: verification_level_to_credential_types(\n              verification_level ?? DEFAULT_VERIFICATION_LEVEL\n            ),\n            verification_level: verification_level ?? DEFAULT_VERIFICATION_LEVEL\n          })\n        )\n      )\n    });\n    if (!res.ok) {\n      set({ verificationState: \"failed\" /* Failed */ });\n      throw new Error(\"Failed to create client\");\n    }\n    const { request_id } = await res.json();\n    set({\n      iv,\n      key,\n      requestId: request_id,\n      bridge_url: bridge_url ?? DEFAULT_BRIDGE_URL,\n      verificationState: \"awaiting_connection\" /* WaitingForConnection */,\n      connectorURI: `https://worldcoin.org/verify?t=wld&i=${request_id}&k=${encodeURIComponent(\n        await exportKey(key)\n      )}${bridge_url && bridge_url !== DEFAULT_BRIDGE_URL ? `&b=${encodeURIComponent(bridge_url)}` : \"\"}`\n    });\n  },\n  pollForUpdates: async () => {\n    const key = get().key;\n    if (!key) throw new Error(\"No keypair found. Please call `createClient` first.\");\n    const res = await fetch(new URL(`/response/${get().requestId}`, get().bridge_url));\n    if (!res.ok) {\n      return set({\n        errorCode: \"connection_failed\" /* ConnectionFailed */,\n        verificationState: \"failed\" /* Failed */\n      });\n    }\n    const { response, status } = await res.json();\n    if (status != \"completed\" /* Completed */) {\n      return set({\n        verificationState: status == \"retrieved\" /* Retrieved */ ? \"awaiting_app\" /* WaitingForApp */ : \"awaiting_connection\" /* WaitingForConnection */\n      });\n    }\n    let result = JSON.parse(\n      await decryptResponse(key, buffer_decode(response.iv), response.payload)\n    );\n    if (\"error_code\" in result) {\n      return set({\n        errorCode: result.error_code,\n        verificationState: \"failed\" /* Failed */\n      });\n    }\n    if (\"credential_type\" in result) {\n      result = {\n        verification_level: credential_type_to_verification_level(result.credential_type),\n        ...result\n      };\n    }\n    set({\n      result,\n      key: null,\n      requestId: null,\n      connectorURI: null,\n      verificationState: \"confirmed\" /* Confirmed */\n    });\n  },\n  reset: () => {\n    set({\n      iv: null,\n      key: null,\n      result: null,\n      errorCode: null,\n      requestId: null,\n      connectorURI: null,\n      verificationState: \"loading_widget\" /* PreparingClient */\n    });\n  }\n}));\nexport {\n  AppErrorCodes,\n  CredentialType,\n  DEFAULT_VERIFICATION_LEVEL,\n  VerificationLevel,\n  VerificationState,\n  useWorldBridgeStore,\n  verification_level_to_credential_types\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}